name: Java CI and CD Pipeline with Maven

# Triggers the workflow on code pushes to the cicd-workflow branch and on pull requests targeting the cicd-workflow branch
on:
  push:
    branches: [ "cicd-workflow" ]
  pull_request:
    branches: [ "cicd-workflow" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Set up JDK ${{matrix.java}}
      uses: actions/setup-java@v4
      with:
        java-version: ${{matrix.java}}
        distribution: 'adopt'
        cache: maven
    - name: Grant execute permission for Maven wrapper
      run: chmod +x mvnw

    - name: Cache Maven packages
      uses: actions/cache@v4 # Caches Maven dependencies to speed up subsequent builds
      with:
        path: ~/.m2 # default location where Maven stores downloaded dependencies
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }} # cache key is used to identify the cached data
        restore-keys: ${{ runner.os }}-m2 # fallback cache keys to restore a more general cache, if the pom.xml files have changed, but the OS and maven locations have not

    - name: Build with Maven Wrapper # Builds the Java application using Maven wrapper mvnw
      run: ./mvnw -B verify
    - name: Run Unit Tests # Runs the unit tests
      run: ./mvnw test

    - name: Copy generated artifact to staging directory
      run: mkdir staging && cp target/*.jar staging
    
    - name: Cache SonarQube packages # Runs SonarQube code analysis, check if the Sonarqube's EC2 instance's security group allows inbound traffic on port 9000 from the GitHub Actions runners
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Build and analyze
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Java-lab -Dsonar.projectName='Java-lab'
    
    - name: Publish Artifacts    
      uses: actions/upload-artifact@v4  # Uploads the generated artifact (.jar file)
      with:
        name: application-artifact
        path: staging


  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: application-artifact
        path: staging

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

    - name: Test SSH Connection
      run: ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

    - name: Deploy JAR to EC2
      run: scp -o StrictHostKeyChecking=no staging/*.jar ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app.jar
 
    - name: Start Java App Spring PetClinic on EC2 instance
    # Restart the java app on EC2 and redirect both standard output and standard error from the Java application to the app.log file and runs the application in the background
      run: ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "pkill -f 'java -jar' || true; nohup java -jar /home/ubuntu/app.jar > app.log 2>&1 &"   